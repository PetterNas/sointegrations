#setLanguageLevel 3;
#include "chatbotConfig";

Bool countCustMsg(String chatSessionId)
{
  SearchEngine countMsg;
  countMsg.addField("chat_message.id");
  countMsg.addCriteria("chat_message.session_id", "Equals", chatSessionId);
  countMsg.addCriteria("chat_message.type", "Equals", "2");
  
  if(countMsg.countRows() >= minCustMsg)
  {
    return True;
  }
  else
  {
    return False;
  }  
}

String populateTranscript(String chatSessionId)
{
  String Null;
  Map m;
  m.insert(Null, "Customer");
  m.insert(botName, botName);  
  
  SearchEngine getTranscript;
  getTranscript.addFields("chat_message","author,session_id,message"); // To get author, session_id and messages.
  getTranscript.addCriteria("chat_message.session_id", "Equals", chatSessionId);
  getTranscript.addCriteria("chat_message.special_type", "OperatorNotEquals", "11");
  String chatMSG; // Will keep all of the messages in this string.

  for (getTranscript.execute(); !getTranscript.eof(); getTranscript.next())
  {
    chatMSG += "<b>"+m.get(getTranscript.getField("chat_message.author"))+"</b>"+": </br> "+getTranscript.getField("chat_message.message")+"</br> </br>";
  }

  return chatMSG;
}

Void createTicket(String chatSessionId)
{
  Ticket newTicket;
  newTicket.setValue("title", botRequestTitle);
  newTicket.setValue("status","2"); //Registered as closed request.
  newTicket.setValue("category", categoryId.toString());
  newTicket.setValue("custId", "1");
  newTicket.setValue("priority", "1");
  newTicket.setValue("origin", "11");
  Integer ticketId = newTicket.save();

  NSChatSummaryItem chatSum;
  chatSum.SetChatSessionId(chatSessionId.toInteger());
  
  Message m;
  m.setValue("author", "(System)");
  m.setValue("createdBy", "1"); //message created by System
  m.setValue("bodyHtml", populateTranscript(chatSessionId) +"</br> </br> Chat started: " +chatSum.GetWhenRequested().toString() + "</br> Chat ended: " + chatSum.GetWhenEnded().toString());
  m.setValue("slevel", "1");//internal message
  m.setValue("ticketId", ticketId.toString());
  m.save();
}  

Void archiveRequest(String topicId, String customer_id, String chatSessionId)
{
  if(topicId == chatTopicId && customer_id == "-1" && countCustMsg(chatSessionId) == True)
  {
    createTicket(chatSessionId);		
  }
}
